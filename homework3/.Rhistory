for i in 1
c = tapply(x[,i], iris$Species, mean)
return (c)
}
b = function(x){
for (i in 1)
c = tapply(x[,i], iris$Species, mean)
return (c)
}
b(iris)
b = function(x){
for (i in 1,2)
c = tapply(x[,i], iris$Species, mean)
return (c)
}
b = function(x){
for (i in 1:2)
c = tapply(x[,i], iris$Species, mean)
return (c)
}
b(iris)
b = function(x){
for (i in 1:2)
i = 1
c = tapply(x[,i], iris$Species, mean)
return (c)
}
b(iris)
b = function(x){
i = 1
while(i < 5)
{
c = tapply(x[,i], iris$Species, mean)
i = i+ 1
}
return (c)
}
b(iris)
b = function(x,i){
while(i < 5)
{
c = tapply(x[,i], iris$Species, mean)
i = i+ 1
}
return (c)
}
b(iris,1)
for (year in c(1,2,3)){
print(paste("hello",year))
}
b = function(x){
for(i in c(1,2,3,4))
{
tapply(x[,i], iris$Species, mean)
}
}
b(iris)
{
print (tapply(x[,i], iris$Species, mean))
}
{
print (tapply(iris[,i], iris$Species, mean))
}
{
tapply(iris[,i], iris$Species, mean)
}
{
tapply(iris[,i], iris$Species, mean)
}
{
tapply(iris[,:i], iris$Species, mean)
}
{
tapply(iris[,i], iris$Species, mean)
}
i= 1
{
tapply(iris[,i], iris$Species, mean)
}
{
tapply(iris[,year], iris$Species, mean)
}
rm(year)
rm(i)
rm(b)
{
tapply(iris[,year], iris$Species, mean)
}
my_vec = c(1,2,3,4)
{
tapply(iris[, my_vec[i]], iris$Species, mean)
}
{
tapply(iris[, my_vec[year]], iris$Species, mean)
}
{
tapply(iris[, my_vec[year]], iris$Species, mean)
}
mean_features = function(x){
for( i in 1:4){
a = tapply(x[i], iris$Species, mean)
a
}
}
mean_features(iris)
mean_features = function(x){
for( i in 1:4){
a = tapply(x[,i], iris$Species, mean)
a
}
}
mean_features(iris)
mean_features(iris)
mean_features = function(x){
for( i in 1:4){
a = tapply(x[,i], iris$Species, mean)
}
}
mean_features(iris)
mean_features = function(x){
for( i in 1:4){
a = tapply(x[,i], iris$Species, mean)
}
return(a)
}
mean_features(iris)
mean_features = function(x){
for( i in 1:4){
a = tapply(x[,i], iris$Species, mean)
a.dataframe(a)
}
return(a)
}
mean_features(iris)
mean_features = function(x){ c = c()
for( i in 1:4){
c[i]=tapply(x[,i], iris$Species, mean)
}
return(c)
}
mean_features(iris)
rep((tapply(x[,i], iris$Species, mean),4)
rep((tapply(x[,i], iris$Species, mean), each =4)
mean_features = function(x){ c = c()
for( i in 1:4){
c= tapply(x[,i], iris$Species, mean)
}
return(c)
}
mean_features = function(x){
for( i in 1:4){
c= tapply(x[,i], iris$Species, mean)
}
return(c)
}
mean_features(iris)
tapply(iris$Petal.Width,iris$Species, mean)
tapply(iris$Petal.Length, iris$Species, mean )
by(iris$Petal.Length, iris$Species, mean )
tapply(iris$Petal.Length, iris$Species, mean )
rm(mean_features)
rm(my_vec)
i= 1
rm(i)
for( i in 1:4){
print(tapply(x[,i], iris$Species, mean))
}
for( i in 1:4){
print(tapply(iris[,i], iris$Species, mean))
}
print("hey")
print("hey", 1)
print("hey", iris$Sepal.Length)
print(paste("hey", iris$Sepal.Length))
paste("hey", iris$Sepal.Length)
print("hey", iris$Sepal.Length)
rm(i)
for( i in 1:4){
print(tapply(iris[,i], iris$Species, mean))
}
?aggregate()
for( i in 1:4){
print( aggregate(iris[,i], iris$Species, mean))
}
for( i in 1:4){
print( aggregate(iris[,i], list(iris$Species), mean))
}
for( i in length(iris)){
print(tapply(iris[,i], iris$Species, mean))
}
}
for( i in 1:4){
print(tapply(iris[,i], iris$Species, mean))
}
for( i in 1:4){
print(by(iris[,i], iris$Species, mean))
}
for( i in 1:4){
print( aggregate(iris[,i], list(iris$Species), mean))
}
for( i in 1:4){
print( aggregate(iris[,i], list(iris$Petal.Length), mean))
}
for( i in 1:4){
print( aggregate(iris[,i], iris$Species, mean))
}
for( i in 1:4){
print( aggregate(iris[,i], list(iris$Species), mean))
}
for( i in 1:4){
print( aggregate(iris[,i], list(iris$Species), mean))
}
return (c)}
bana=function(x){
c = c()
for( i in 1:4){
c[0]= print( aggregate(x[,i], list(iris$Species), mean))
}
return (c)
}
bana(iris)
rm(bana)
features_aggregate = function(x){
create_vector = c()
for( i in 1:4){
create_vector[0]= print( aggregate(x[,i], list(iris$Species), mean))
}
return (create_vector)
}
features_aggregate(iris)
features_aggregate = function(x){
create_vector = c()
for( i in 1:4){
create_vector[i]= print( aggregate(x[,i], list(iris$Species), mean))
}
return (create_vector)
}
features_aggregate(iris)
features_aggregate = function(x){
create_vector = c()
for( i in 1:4){
create_vector[]= print( aggregate(x[,i], list(iris$Species), mean))
}
return (create_vector)
}
features_aggregate(iris)
class(create_vector)
features_aggregate = function(x){
create_vector = c()
for( i in 1:4){
create_vector[]=  aggregate(x[,i], list(iris$Species), mean)
}
return (create_vector)
}
features_aggregate(iris)
features_aggregate = function(x){
create_vector = c()
for( i in 1:4){
create_vector[]= c( aggregate(x[,i], list(iris$Species), mean))
}
return (create_vector)
}
features_aggregate(iris)
features_aggregate = function(x){
create_vector = c()
for( i in 1:4){
create_vector[]= print(aggregate(x[,i], list(iris$Species), mean))
}
return (create_vector)
}
features_aggregate(iris)
features_aggregate = function(x){
create_vector = c()
for( i in 1:4){
create_vector[]= print(aggregate(x[,i], list(iris$Species), mean))
}
return (create_vector)
length(create_vector)
}
features_aggregate = function(x){
create_vector = c()
for( i in 1:4){
create_vector[]= print(aggregate(x[,i], list(iris$Species), mean))
}
length(create_vector)
return (create_vector)
}
features_aggregate(iris)
features_aggregate = function(x){
create_vector = c()
for( i in 1:4){
create_vector[]= print(aggregate(x[,i], list(iris$Species), mean))
}
# length(create_vector)
# return (create_vector)
}
features_aggregate(iris)
features_aggregate = function(x){
create_vector = c()
for( i in 1:4){
create_vector[i]= (aggregate(x[,i], list(iris$Species), mean))
}
# length(create_vector)
# return (create_vector)
}
features_aggregate(iris)
rm(features_aggregate)
for( i in 1:4){
aggregate(x[,i], list(iris$Species), mean)
}
for( i in 1:4){
aggregate(iris[,i], list(iris$Species), mean)
}
for( i in 1:4){
aggregate(iris[,i], list(iris$Species), mean)
}
for( i in 1:4){
print(aggregate(iris[,i], list(iris$Species), mean))
}
{
tapply(iris[,i], iris$Species, function(x)
apply(iris[i], 2,))
}
{
tapply(iris[,i], iris$Species, function(x){
apply(iris[i], 2)})
}
{
tapply(iris[,i], iris$Species, function(x){
apply(iris[i], 2, mean)})
}
{
print(tapply(iris[,i], iris$Species, function(x){
apply(iris[i], 2, mean)}))
}
# 5a, look up the function "mapply"
# we create list_a in 3f).
list_b <- list(a=1:10, b=21:30)
list_b
list_a
{
print(tapply(iris[,i], iris$Species, function(x){
apply(iris[i], 2, mean)}))
}
{
print(tapply(iris[,i], iris$Species, function(x){
apply(iris[,i], 2, mean)}))
}
{
print(tapply(iris[,i], iris$Species, function(x){
apply(iris, 2, mean)}))
}
for( i in 1:4){
print(aggregate(iris, list(iris$Species), mean))
}
aggregate(iris, list(iris$Species), mean)
print(aggregate(iris, list(iris$Species), mean))
print(aggregate(iris[,1:4], list(iris$Species), mean))
for( i in 1:4){
print(aggregate(iris[,i], list(iris$Species), mean))
}
print(aggregate(iris[,1:4], list(iris$Species), mean))
print(by(iris[,1:4], iris$Species, mean))
print(by(iris[,1], iris$Species, mean))
for( i in 1:4){
print(by(iris[,i], iris$Species, mean))
}
aggregate(iris[,1:4], list(iris$Species), mean)
apply(iris, 2, function(X) {tapply(iris$Species)})
apply(iris, 2, function(X) {tapply(iris , iris$Species)})
apply(iris, 2, function(X) {tapply(iris$Sepal.Length , iris$Species)})
for( i in 1:4){
print(by(iris[,i], iris$Species, length))
}
for( i in 1:4){
print(by(iris[,i], iris$Species, mean))
}
# 4d, same as 4b), but using the combination of "apply" and "tapply".
# (hint: nested function)
apply(tapply(iris[,1], iris$Species,sort), 2, mean)
# 4d, same as 4b), but using the combination of "apply" and "tapply".
# (hint: nested function)
apply(tapply(iris[,1], iris$Species, sort), 2, mean)
# 4d, same as 4b), but using the combination of "apply" and "tapply".
# (hint: nested function)
apply(tapply(iris[,1], iris$Species, mean), 2, mean)
# anything similar to the example above doesn't count.
apply(apply(iris,2,length),2,print)
apply(iris,2,length)
# anything similar to the example above doesn't count.
apply(apply(iris,2,length), 2 ,list())
# anything similar to the example above doesn't count.
apply(apply(iris,2,length), 2 , mean)
# anything similar to the example above doesn't count.
apply(apply(iris,2,mean), 2 , mean)
apply(iris[,1], 2, function(x) {tapply(x, iris$Species, mean)}
apply(iris[,1], 2, function(x) {tapply(x, iris$Species, mean)})
tapply(iris[,1], 2, function(x) {tapply(x, iris$Species, mean)})
tapply(iris[,1], iris$Petal.Length, function(x) {tapply(x, iris$Species, mean)})
sapply(iris[,1], function(x) {tapply(x, iris$Species, mean)})
sapply(iris[,1], function(x) {tapply(iris[,1], iris$Species, mean)})
sapply(iris, function(x) {tapply(iris[,1], iris$Species, mean)})
tapply(iris[,1], iris$Species, function(X) sapply(iris, mean))
sapply(numbers, function(x) numbers ^ 2
)
# 2a, find the square root, the square and the cube of the numbers 1 to 10.
# (hint: think about how to define the function first; your answer should be a 3-by-10 matrix.)
numbers = c(1,2,3,4,5,6,7,8,9,10)
sapply(numbers, function(x) numbers ^ 2
)
sapply(numbers, function(x)
numbers ^ 2
sqrt(numbers) )
function(x) {
print(numbers ^ 2)
print(sqrt(numbers) )
}
a=function(x) {
print(numbers ^ 2)
print(sqrt(numbers) )
}
print(sqrt(i) )}
for (i in numbers) {
print(i ^ 2)
print(sqrt(i))
}
for (i in numbers) {
B = c(i ^ 2)
C=  sqrt(i)
}
for (i in numbers) {
B = c(i ^ 2)
C=  sqrt(i)
D = i*3
}
for (i in numbers) {
B = c(i ^ 2)
C=  sqrt(i)
D = i^3
}
sapply(numbers, square)
sapply(numbers, sqrt)
sapply(numbers, function (x) x^2)
sapply(numbers, function (x) x^3)
rm(B)
rm(C)
rm(D)
squareroot_vector= sapply(numbers, sqrt)
square_vector =sapply(numbers, function (x) x^2)
cube_vector = sapply(numbers, function (x) x^3)
solution_matrix = rbind(squareroot_vector,square_vector,cube_vector)
View(solution_matrix)
class(solution_matrix)
sapply(numbers,  function(x)
{ x ^ 2
x^3}  )
sapply(numbers,  function(x)
{
A =x ^ 2
B= x^3}  )
class(solution_matrix)
View(solution_matrix)
typeof(squareroot_vector)
object(solution_matrix)
squareroot_vector
solution_matrix = cbind(squareroot_vector,square_vector,cube_vector)
View(solution_matrix)
View(solution_matrix)
solution_matrix = rbind(squareroot_vector,square_vector,cube_vector)
View(solution_matrix)
mapply(sum, list_a$c,list_a$d,list_b$a, list_b$b)
load("C:/Users/Kosi/Downloads/family.rda")
lm(weight ~ height, data = family)
rm(a)
library("markdown", lib.loc="~/R/win-library/3.4")
data(mtcars)
sapply(mtcars, class)
library("markdown", lib.loc="~/R/win-library/3.4")
?lm
scatter.smooth (x = family$height, y = family$weight, main= "weight~ height")
set.seed(1120)
some_matrix = matrix(rnorm(100), ncol = 10)  # standard normal dist
some_matrix[1, 3]= some_matrix[5,5]=some_matrix[10, 2]= some_matrix[6,8] = NA
set.seed(1120)
some_matrix = matrix(rnorm(100), ncol = 10)  # standard normal dist
some_matrix[1, 3]= some_matrix[5,5]=some_matrix[10, 2]= some_matrix[6,8] = NA
# 1b, sort (all) the columns of the above matrix
apply(some_matrix, 2, sort)
some_matrix = matrix(rnorm(100), ncol = 10)  # standard normal dist
some_matrix[1, 3]= some_matrix[5,5]=some_matrix[10, 2]= some_matrix[6,8] = NA
some_matrix[1, 3]= some_matrix[5,5]=some_matrix[10, 2]= some_matrix[6,8] = NA
some_matrix
# 1b, sort (all) the columns of the above matrix
apply(some_matrix, 2, sort)
some_matrix = matrix(rnorm(100), ncol = 10)  # standard normal dist
some_matrix[1, 3]= some_matrix[5,5]=some_matrix[10, 2]= some_matrix[6,8] = NA
# 1a, what's the variance of the observations in each row of the matrix?
row_var = apply(some_matrix, 1, var,na.rm=TRUE)
row_var
# 1b, sort (all) the columns of the above matrix
apply(some_matrix, 2, sort)
some_matrix
# 1b, sort (all) the columns of the above matrix
apply(some_matrix, 2, sort)
View(some_matrix)
# 1b, sort (all) the columns of the above matrix
some_matrix = apply(some_matrix, 2, sort)
View(some_matrix)
apply(some_matrix,2 , sum  )
unlist(some_matrix)
some_matrix=unlist(some_matrix)
apply(some_matrix,2 , sum  )
